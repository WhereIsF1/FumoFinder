// todo:
// fix episode_identifier randomly dropping frames when proxies fails - just dont use bad proxies lol
// fix some info collection not working properly
// implement custom naming for files + somehow done - have to figure out how to implement season finding
// implement api key usage option for trace.moe

package main

import (
	"fmt"
	"io"
	"log"
	"net/url"
	"os"
	"path/filepath"
	"strings"

	"github.com/WhereIsF1/FumoFinder/internal/config"     // Import the config package
	"github.com/WhereIsF1/FumoFinder/internal/extractor"  // Import the extractor package
	"github.com/WhereIsF1/FumoFinder/internal/identifier" // Import the identifier package
	"github.com/WhereIsF1/FumoFinder/internal/proxy"      // Import the proxy package
	"github.com/WhereIsF1/FumoFinder/internal/renamer"    // Import the renamer package
)

var (
	version = "dev"
	commit  = "none"
	date    = "unknown"
)

func main() {
	// Check if help is needed or no arguments are provided.
	if len(os.Args) == 1 || hasHelpFlag() {
		printHelpHeader()
		printHelp()
		return
	}

	// Print the ASCII art header
	printHeader()

	// Load configurations from command line arguments
	cfg := config.LoadConfig()

	// Print the loaded configuration settings
	printConfig(cfg)

	// Extract frames from each video file in the specified folder
	frameExtractor := extractor.NewFrameExtractor(cfg.FfmpegPath, cfg.FfprobePath, cfg.NumFrames)
	frames, err := frameExtractor.ExtractFrames(cfg.InputFolder)
	if err != nil {
		log.Fatalf("Error extracting frames: %v", err)
	}

	// Initialize the proxy loader and load proxies after frame extraction
	var proxies []*url.URL
	if cfg.ProxyFilePath != "" {
		// If the proxy file path is specified, load proxies
		proxyLoader := proxy.NewProxyLoader()
		err := proxyLoader.LoadProxies(cfg.ProxyFilePath)
		if err != nil {
			log.Printf("Error loading proxies: %v", err)
		} else {
			proxies = proxyLoader.GetProxyList()
			if len(proxies) > 0 {
				fmt.Println("‚úÖ	Proxies loaded successfully.")
			} else {
				fmt.Println("‚ö†Ô∏è	No working proxies found. Proceeding without proxies.")
			}
		}
	} else {
		fmt.Println("‚ÑπÔ∏è	No proxy file specified.")
	}

	// Convert []*url.URL to []proxy.ProxyDetails, or use an empty list if no proxies are loaded
	var proxyDetails []proxy.ProxyDetails
	for _, p := range proxies {
		proxyDetails = append(proxyDetails, proxy.ProxyDetails{URL: p})
	}

	// Initialize the episode identifier with the loaded proxies (or direct connection if none)
	episodeIdentifier := identifier.NewEpisodeIdentifier(cfg.ApiEndpoint, cfg.AniListID, proxyDetails)

	// Initialize the file renamer
	fileRenamer := renamer.NewFileRenamer(cfg.InputFolder)

	// Start the identification process in a separate goroutine
	go episodeIdentifier.IdentifyEpisodes(frames, cfg.Threshold)

	// Wait for the identification process to complete
	episodeIdentifier.WaitForCompletion()

	fmt.Println()
	fmt.Println("‚úîÔ∏è	All frames have been processed, exiting the identification process...")

	fmt.Println(strings.Repeat("-", 50))
	fmt.Println("‚úÖ	Episode identification completed.")
	// Check if matches are available and add them to the renamer
	if len(episodeIdentifier.Matches) == 0 {
		fmt.Println("‚ö†Ô∏è	No matches found. Skipping renaming.")
	} else {
		fmt.Printf("‚úÖ	%d matches found. Adding to renamer...\n", len(episodeIdentifier.Matches))
		for _, match := range episodeIdentifier.Matches {
			fileRenamer.AddResult(match) // Add MatchInfo to the file renamer
		}

		// Rename the files based on majority episode results
		fmt.Println("üöÄ	Starting file renaming...")
		fileRenamer.RenameFiles()
		fmt.Println("‚úÖ	File renaming completed.")
	}

	fmt.Println(strings.Repeat("=", 50))

	// Perform cleanup if the no-cleanup flag is not set
	if !cfg.NoCleanup {
		cleanupExtractedFrames(frames)
	}
}

// printHeader prints the ASCII art header
func printHeader() {
	fmt.Println(`
		‚†Ä‚¢Ä‚£í‚†í‚†Ü‚†§‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
		‚¢†‚°õ‚†õ‚†ª‚£∑‚£∂‚£¶‚£¨‚£ï‚°í‚†§‚¢Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
		‚°ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚†ø‚£ø‚£≥‚†ñ‚¢ã‚£©‚£≠‚£ø‚£∂‚°§‚†∂‚†∂‚¢∂‚£í‚£≤‚¢∂‚£â‚£ê‚£í‚£í‚£í‚¢§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
		‚£ø‚†Ä‚†â‚£©‚£≠‚£Ω‚£∂‚£æ‚£ø‚¢ø‚°è‚¢Å‚£¥‚†ø‚†õ‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ô‚†≤‚¢≠‚£Ø‚£ü‚°ø‚£∑‚£ò‚†¢‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
		‚†π‚£∑‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ü‚£µ‚†ã‚¢†‚°æ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£ø‚£ø‚£æ‚£¶‚£æ‚£¢‚†Ä‚†Ä‚†Ä‚†Ä
		‚†Ä‚†π‚£ø‚£ø‚£ø‚°ø‚£≥‚£ø‚†É‚†Ä‚£º‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ª‚£ø‚£ø‚£ø‚†ü‚†Ä‚†Ä‚†Ä‚†Ä
		‚†Ä‚†Ä‚†π‚£ø‚£ø‚£µ‚£ø‚†É‚†Ä‚†Ä‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£∑‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
		‚†Ä‚†Ä‚†Ä‚†à‚†õ‚£Ø‚°á‚†õ‚£Ω‚£¶‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†ô‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†≥‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚°µ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä
		‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚£ø‚£ø‚†ø‚¢ø‚†ü‚†Ä‚†Ä‚†Ä‚¢Ä‚°è‚†Ä‚†Ä‚†ò‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚†É‚†Ä‚†π‚°Ñ‚†Ä‚†Ä‚†Ä‚†∏‚£ø‚£∑‚°Ä‚†Ä‚†Ä‚†Ä
		‚†Ä‚†Ä‚†Ä‚¢∞‚£ø‚£ø‚£ø‚£ø‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†í‚†§‚¢§‚£Ä‚£ò‚£Ü‚†Ä‚†Ä‚†Ä‚°è‚¢Ä‚£Ä‚°†‚¢∑‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚°ø‚†É‚†Ä‚†Ä‚†Ä
		‚†Ä‚†Ä‚†Ä‚†∏‚£ø‚£ø‚†ü‚¢π‚£•‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£Ä‚£Ä‚£§‚£Ä‚£Ä‚†à‚†≥‚¢§‚°Ä‚°á‚£Ä‚£†‚£Ñ‚£∏‚°Ü‚†Ä‚†Ä‚†Ä‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
		‚†Ä‚†Ä‚†Ä‚†Ä‚†Å‚†Å‚†Ä‚¢∏‚¢ü‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚†Å‚†Ä‚†à‚†ô‚†ô‚£Ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚¢†‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
		‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†á‚¢®‚¢û‚¢Ü‚†Ä‚†Ä‚†Ä‚°ø‚£ø‚£ø‚£ø‚£ø‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚°ø‚°á‚†Ä‚£†‚¢ü‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
		‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°º‚†Ä‚¢à‚°è‚¢é‚†≥‚£Ñ‚†Ä‚°á‚†ô‚†õ‚†ü‚†õ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†ª‚†õ‚¢±‚¢É‚°ú‚°ù‚†à‚†ö‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä
		‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£Ö‚†Å‚¢∏‚£ã‚†à‚¢£‚°à‚¢∑‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ñ‚†Ä‚†Ä‚¢Ä‚°Ñ‚†Ä‚†Ä‚£†‚£º‚¢Ø‚£¥‚†á‚£Ä‚°Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä
		‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†≥‚°å‚†õ‚£∂‚£Ü‚£∑‚£ø‚£¶‚£Ñ‚£Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†â‚¢â‚£Ä‚£§‚°û‚¢õ‚£Ñ‚°Ä‚¢Ä‚°®‚¢ó‚°¶‚†é‚†Ä‚†Ä‚†Ä‚†Ä
		‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ë‚†™‚£ø‚†Å‚†Ä‚†ê‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£è‚†â‚†Å‚¢∏‚†Ä‚†Ä‚†Ä‚†Ñ‚†ô‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä
		‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†§‚†ö‚°â‚¢≥‚°Ñ‚†°‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£è‚†Å‚£†‚£ß‚£§‚£Ñ‚£Ä‚°Ä‚°∞‚†Å‚†Ä‚†Ä‚†Ä‚†Ä
		‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ß‚£†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ö‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
		‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ü‚†Ä‚†Ä‚†Ä‚£Ä‚£º‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ü‚†ã‚†Å‚£†‚†ñ‚†í‚†í‚†õ‚¢ø‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä
		‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ë‚†§‚†¥‚†û‚¢ã‚£µ‚£ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ó‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°º‚£∂‚£§‚†Ä‚†Ä
		‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°†‚†ü‚¢õ‚£ø‚†Ä‚†ô‚†≤‚†Ω‚†õ‚†õ‚†µ‚†û‚†â‚†ô‚†≥‚¢¶‚£Ä‚£Ä‚°û‚†Ä‚†Ä‚†Ä‚†Ä‚°†‚†ã‚†ê‚†£‚†Æ‚°Å‚†Ä
		‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£é‚°Ä‚¢Ä‚£æ‚†á‚¢Ä‚£†‚°∂‚¢∂‚†û‚†ã‚†â‚†â‚†í‚¢Ñ‚°Ä‚†â‚†à‚†â‚†Ä‚†Ä‚†Ä‚£†‚£æ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°Ä
		‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£¶‚°Ä‚†ò‚¢Å‚°¥‚¢ü‚£Ø‚£û‚¢â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚†∂‚†§‚†§‚°§‚¢ñ‚£ø‚°ã‚¢á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä
		‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†µ‚†ó‚†∫‚†ü‚†ñ‚¢à‚°£‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚°§‚£¨‚£Ω‚†æ‚†ã‚†â‚†ë‚†∫‚†ß‚£Ä‚£§‚£§‚°†‚†ü‚†É
		‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚†∑‚†∂‚†¶‚†∂‚†û‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä

‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ïö‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù V187    
	`)
	fmt.Printf("FumoFinder - Version: %s, Commit: %s, Date: %s\n", version, commit, date)
	fmt.Println()
	fmt.Println("Anime Episode Finder - Powered by trace.moe & Fumos")
	fmt.Println("==================================================")
	fmt.Println("Starting episode identification process...")
	fmt.Println("==================================================")
}

// printConfig prints the parsed configuration settings in a readable format
func printConfig(cfg *config.Config) {
	fmt.Println("\nLoaded Configuration:")
	fmt.Println(strings.Repeat("=", 50))
	fmt.Printf("Input Folder    : %s\n", cfg.InputFolder)
	fmt.Printf("FFmpeg Path     : %s\n", cfg.FfmpegPath)
	fmt.Printf("FFprobe Path    : %s\n", cfg.FfprobePath)
	fmt.Printf("Number of Frames: %d\n", cfg.NumFrames)
	fmt.Printf("API Endpoint    : %s\n", cfg.ApiEndpoint)
	if cfg.AniListID != 0 {
		fmt.Printf("AniList ID      : %d\n", cfg.AniListID)
	} else {
		fmt.Printf("AniList ID      : Not specified\n")
	}
	fmt.Printf("Threshold       : %.2f seconds\n", cfg.Threshold)
	fmt.Printf("Cleanup         : %t\n", !cfg.NoCleanup)
	fmt.Printf("Proxy File      : %s\n", cfg.ProxyFilePath)
	fmt.Println(strings.Repeat("=", 50))
}

// CleanupExtractedFrames deletes the extracted frames after the run
func cleanupExtractedFrames(frames []string) {
	fmt.Println("\nPerforming cleanup...")
	for _, frame := range frames {
		err := os.Remove(frame)
		if err != nil {
			log.Printf("Failed to delete frame %s: %v", frame, err)
		}
	}

	// Optionally, remove empty directories if all frames are purged
	removeEmptyDirs(filepath.Join("frames"))

	// Check if the frames directory is empty and remove it if it is
	if isDirEmpty("frames") {
		err := os.Remove("frames")
		if err != nil {
			log.Printf("Failed to delete frames directory: %v", err)
		} else {
			fmt.Println("Removed empty frames directory.")
		}
	} else {
		fmt.Println("Frames directory is not empty.")
	}
	fmt.Println("Cleaned up extracted frames.")
}

// RemoveEmptyDirs deletes empty directories left after frames are deleted
func removeEmptyDirs(root string) {
	filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
		if err == nil && info.IsDir() && path != root {
			os.Remove(path)
		}
		return nil
	})
}

// isDirEmpty checks if a directory is empty
func isDirEmpty(name string) bool {
	f, err := os.Open(name)
	if err != nil {
		return false
	}
	defer f.Close()

	_, err = f.Readdir(1)
	return err == io.EOF
}
